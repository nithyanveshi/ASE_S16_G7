{
  "_args": [
    [
      "inquirer2@github:jonschlinkert/inquirer2",
      "K:\\UMKC\\Docs\\Subjects\\5551_ASE\\Project\\ASE_S16_G7\\SourceCode\\Increment3\\ASE_S16_G7-tgww4\\Source\\StudentCompanion\\node_modules\\question-cache"
    ]
  ],
  "_from": "jonschlinkert/inquirer2",
  "_id": "inquirer2@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/question-cache/inquirer2",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/jonschlinkert/inquirer2/master/package.json",
      "gitUrl": "git://github.com/jonschlinkert/inquirer2.git",
      "httpsUrl": "git+https://github.com/jonschlinkert/inquirer2.git",
      "shortcut": "github:jonschlinkert/inquirer2",
      "ssh": "git@github.com:jonschlinkert/inquirer2.git",
      "sshUrl": "git+ssh://git@github.com/jonschlinkert/inquirer2.git",
      "type": "github"
    },
    "name": "inquirer2",
    "raw": "inquirer2@github:jonschlinkert/inquirer2",
    "rawSpec": "github:jonschlinkert/inquirer2",
    "scope": null,
    "spec": "github:jonschlinkert/inquirer2",
    "type": "hosted"
  },
  "_requiredBy": [
    "/question-cache"
  ],
  "_resolved": "git://github.com/jonschlinkert/inquirer2.git#b4d012428f66531d40a185f999ccb58d8196f4f3",
  "_shasum": "b824c675cc31aaada1d52df0760a5c3122e4244a",
  "_shrinkwrap": null,
  "_spec": "inquirer2@github:jonschlinkert/inquirer2",
  "_where": "K:\\UMKC\\Docs\\Subjects\\5551_ASE\\Project\\ASE_S16_G7\\SourceCode\\Increment3\\ASE_S16_G7-tgww4\\Source\\StudentCompanion\\node_modules\\question-cache",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/inquirer2/issues"
  },
  "dependencies": {
    "ansi-escapes": "^1.1.1",
    "ansi-regex": "^2.0.0",
    "arr-flatten": "^1.0.1",
    "arr-pluck": "^0.1.0",
    "array-unique": "^0.2.1",
    "chalk": "^1.1.1",
    "cli-cursor": "^1.0.2",
    "cli-width": "^1.1.0",
    "extend-shallow": "^2.0.1",
    "figures": "^1.4.0",
    "is-number": "^2.1.0",
    "is-plain-object": "^2.0.1",
    "lazy-cache": "^1.0.3",
    "lodash.where": "^3.1.0",
    "readline2": "^1.0.1",
    "run-async": "^0.1.0",
    "rx-lite": "^4.0.7",
    "strip-color": "^0.1.0",
    "through2": "^2.0.0"
  },
  "description": "Lighter, faster alternative to inquirer. A collection of common interactive command line user interfaces.",
  "devDependencies": {
    "chai": "^3.0.0",
    "cmdify": "^0.0.4",
    "gulp": "^3.9.0",
    "gulp-eslint": "^1.1.1",
    "gulp-istanbul": "^0.10.3",
    "gulp-mocha": "^2.2.0",
    "lodash": "^3.10.1",
    "mocha": "*",
    "mockery": "^1.4.0",
    "sinon": "^1.12.1"
  },
  "files": [
    "index.js",
    "lib/"
  ],
  "gitHead": "b4d012428f66531d40a185f999ccb58d8196f4f3",
  "homepage": "https://github.com/jonschlinkert/inquirer2",
  "keywords": [
    "cli",
    "command",
    "menu",
    "prompt",
    "stdin",
    "tty"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "inquirer2",
  "optionalDependencies": {},
  "readme": "# inquirer2 {%= badge(\"travis\") %}\r\n\r\n[![npm](https://badge.fury.io/js/inquirer.svg)](http://badge.fury.io/js/inquirer) [![tests](https://travis-ci.org/SBoudrias/Inquirer.js.svg?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js) [![dependencies](https://david-dm.org/SBoudrias/Inquirer.js.svg?theme=shields.io)](https://david-dm.org/SBoudrias/Inquirer.js)\r\n\r\n> A collection of common interactive command line user interfaces.\r\n\r\n## Goal and Philosophy\r\n\r\n<img align=\"right\" alt=\"Inquirer Logo\" src=\"/assets/inquirer_readme.png\" title=\"Inquirer.js\"/>\r\n\r\n**`Inquirer.js`** strives to be an easily embeddable and beautiful command line interface for [Node.js](https://nodejs.org/) (and perhaps the \"CLI [Xanadu](https://en.wikipedia.org/wiki/Xanadu_(Citizen_Kane))\").\r\n\r\n**`Inquirer.js`** should ease the process of\r\n- providing *error feedback*\r\n- *asking questions*\r\n- *parsing* input\r\n- *validating* answers\r\n- managing *hierarchical prompts*\r\n\r\n> **Note:** **`Inquirer.js`** provides the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js).\r\n\r\n\r\n## Documentation\r\n\r\n### Installation\r\n\r\n```sh\r\nnpm install inquirer2\r\n```\r\n\r\n```js\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\n### Examples (Run it and see it)\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n```sh\r\nnode examples/pizza.js\r\nnode examples/checkbox.js\r\n# etc...\r\n```\r\n\r\n\r\n### Methods\r\n\r\n`inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n- **questions** (Array) containing [Question Object](#question) (using the [reactive interface](#reactive-interface), you can also pass a `Rx.Observable` instance)\r\n- **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\n### Objects\r\n\r\n#### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n- **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`, `password`\r\n- **name**: (String) The name to use when storing the answer in the answers hash.\r\n- **message**: (String|Function) The question to print. If defined as a function, the first parameter will be the current inquirer session answers.\r\n- **default**: (String|Number|Array|Function) Default value(s) to use if nothing is entered, or a function that returns the default value(s). If defined as a function, the first parameter will be the current inquirer session answers.\r\n- **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.\r\nArray values can be simple `strings`, or `objects` containing a `name` (to display in list), a `value` (to save in the answers hash) and a `short` (to display after selection) properties. The choices array can also contain [a `Separator`](#separator).\r\n- **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n- **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n- **when**: (Function, Boolean) Receive the current user answers hash and should return `true` or `false` depending on whether or not this question should be asked. The value can also be a simple boolean.\r\n\r\n`default`, `choices`(if defined as functions), `validate`, `filter` and `when` functions can be called asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n- **Key** The `name` property of the _question_ object\r\n- **Value** (Depends on the prompt)\r\n  - `confirm`: (Boolean)\r\n  - `input` : User input (filtered if `filter` is defined) (String)\r\n  - `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n### Separator\r\n\r\nA separator can be added to any `choices` array:\r\n\r\n```\r\n// In the question object\r\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\r\n\r\n// Which'll be displayed this way\r\n[?] What do you want to do?\r\n > Order a pizza\r\n   Make a reservation\r\n   -------\r\n   Ask opening hours\r\n   Talk to the receptionist\r\n```\r\n\r\nThe constructor takes a facultative `String` value that'll be use as the separator. If omitted, the separator will be `--------`.\r\n\r\nSeparator instances have a property `type` equal to `separator`. This should allow tools faÃ§ading Inquirer interface from detecting separator types in lists.\r\n\r\n### Prompts type\r\n\r\n> **Note:**: _allowed options written inside square brackets (`[]`) are optional. Others are required._\r\n\r\n#### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array or a choice `value`)\r\n\r\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\r\n\r\n***\r\n\r\n#### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n![Raw list prompt](https://i.cloudup.com/LcRGpXI0CX-3000x3000.png)\r\n\r\n***\r\n\r\n#### Expand - `{ type: \"expand\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\nNote that the `choices` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\r\n\r\nSee `examples/expand.js` for a running example.\r\n\r\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\r\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\r\n\r\n***\r\n\r\n#### Checkbox - `{ type: \"checkbox\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`, `default`] properties. `default` is expected to be an Array of the checked choices value.\r\n\r\nChoices marked as `{ checked: true }` will be checked by default.\r\n\r\nChoices whose property `disabled` is truthy will be unselectable. If `disabled` is a string, then the string will be outputted next to the disabled choice, otherwise it'll default to `\"Disabled\"`. The `disabled` property can also be a synchronous function receiving the current answers as argument and returning a boolean or a string.\r\n\r\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\r\n\r\n***\r\n\r\n#### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\r\n\r\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\r\n\r\n***\r\n\r\n#### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\r\n\r\n***\r\n\r\n#### Password - `{ type: \"password\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\r\n\r\n## User Interfaces and layouts\r\n\r\nAlong with the prompts, Inquirer offers some basic text UI.\r\n\r\n#### Bottom Bar - `inquirer.ui.BottomBar`\r\n\r\nThis UI present a fixed text at the bottom of a free text zone. This is useful to keep a message to the bottom of the screen while outputting command outputs on the higher section.\r\n\r\n```js\r\nvar ui = new inquirer.ui.BottomBar();\r\n\r\n// pipe a Stream to the log zone\r\noutputStream.pipe( ui.log );\r\n\r\n// Or simply write output\r\nui.log.write(\"something just happened.\");\r\nui.log.write(\"Almost over, standby!\");\r\n\r\n// During processing, update the bottom bar content to display a loader\r\n// or output a progress bar, etc\r\nui.updateBottomBar(\"new bottom bar content\");\r\n```\r\n\r\n#### Prompt - `inquirer.ui.Prompt`\r\n\r\nThis is UI layout used to run prompt. This layout is returned by `inquirer.prompt` and you should probably always use `inquirer.prompt` to interface with this UI.\r\n\r\n\r\n## Reactive interface\r\n\r\nInternally, Inquirer uses the [JS reactive extension](https://github.com/Reactive-Extensions/RxJS) to handle events and async flows.\r\n\r\nThis mean you can take advantage of this feature to provide more advanced flows. For example, you can dynamically add questions to be asked:\r\n\r\n```js\r\nvar prompts = Rx.Observable.create(function( obs ) {\r\n  obs.onNext({ /* question... */ });\r\n  setTimeout(function () {\r\n    obs.onNext({ /* question... */ });\r\n    obs.onCompleted();\r\n  });\r\n});\r\n\r\ninquirer.prompt(prompts);\r\n```\r\n\r\nAnd using the `process` property, you have access to more fine grained callbacks:\r\n\r\n```js\r\ninquirer.prompt(prompts).process.subscribe(\r\n  onEachAnswer,\r\n  onError,\r\n  onComplete\r\n);\r\n```\r\n\r\n## Support (OS Terminals)\r\n\r\nYou should expect mostly good support for the CLI below. This does not mean we won't\r\nlook at issues found on other command line - feel free to report any!\r\n\r\n- **Mac OS**:\r\n  - Terminal.app\r\n  - iTerm\r\n- **Windows**:\r\n  - cmd.exe\r\n  - Powershell\r\n  - Cygwin\r\n- **Linux (Ubuntu, openSUSE, Arch Linux, etc)**:\r\n  - gnome-terminal (Terminal GNOME)\r\n  - konsole\r\n\r\n\r\n## News on the march (Release notes)\r\n\r\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\r\n\r\n\r\n## Contributing\r\n\r\n**Style Guide**\r\nPlease brief yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent\r\n\r\n**Unit test**\r\nUnit test are written in [Mocha](http://visionmedia.github.io/mocha/). Please add a unit test for every new feature or bug fix. `npm test` to run the test suite.\r\n\r\n**Documentation**\r\nAdd documentation for every API change. Feel free to send corrections\r\nor better docs!\r\n\r\n**Pull Requests**\r\nSend _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\r\n\r\nWe're looking to offer good support for multiple prompts and environments. If you want to\r\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\r\nget feedback before release. Let us know if you want to be added to the list (just tweet\r\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Simon Boudrias (twitter: @vaxilart)\r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonschlinkert/inquirer2.git"
  },
  "scripts": {
    "test": "gulp"
  },
  "verb": {
    "related": {
      "list": []
    }
  },
  "version": "0.1.1"
}
